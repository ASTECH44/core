= Scénario

Voici la partie la plus importante dans la domotique : les scénarios. Véritable cerveau de la domotique, c’est ce qui permet d’interagir avec le monde réel de manière "intelligente".

== La page Scénarios

Pour y accéder rien de plus simple, il suffit d'aller sur Outils -> Scénarios. Vous y trouverez la liste des scénarii de votre Jeedom ainsi que des fonctions pour les gérer au mieux : 

* *Ajouter* : permet de créer un scénario
* *Désactiver scénarios* : permet de désactiver tous les scénarios
* *Voir les variables* : permet de voir les variables, leur valeur ainsi que l'endroit où elle sont utilisées
* *Vue d'ensemble* : permet d'avoir une vue d'ensemble de tous les scénarios
* *Testeur d'expression* : permet d'executer un test sur une expression de votre choix et d'en afficher le résultat

[TIP]
Les scénarios grisés sont ceux sont désactivés.

[TIP]
Comme à beaucoup d'endroits sur Jeedom, mettre la souris à gauche de l'écran permet de faire apparaître un menu d'accès rapide (à partir de votre profil, vous pouvez le laisser toujours visible).

Après avoir cliqué sur "Ajouter", vous devez choisir le nom de votre scénario et vous arrivez sur la page de ses paramètres généraux.

==Général

En haut de cet onglet Général, on retrouve :

* *ID* : à côté du mot *Général*, l'identifiant du scénario
* *Nom du scénario* : Le nom de votre scénario
* *Nom à afficher* : Le nom utilisé pour son affichage
* *groupe* : permet d'organiser les scénarios
* *Actif* : permet d'activer le scénario
* *Visible* : permet de rendre visible le scénario
* *Objet parent* : Affectation à un objet parent
* *Timeout secondes (0 = illimité)* : La durée d’exécution maximale autorisée
* *Multi lancement* :
* *Mode synchrone* :
* *Log* : Le type de log souhaité pour le scénario
* *Suivre dans la timeline* : permet de garder un suivi du scénario dans la timeline
* *Description* : Permet d'écrire un petit texte pour décrire votre scénario
* *Mode du scénario* : Le scénario peut être programmé, déclenché ou les deux à la fois. Vous aurez ensuite le choix d'indiquer le(s) déclencheur(s) et la/les programmation(s).

[TIP]
Attention : vous pouvez avoir au maximum 28 déclencheurs/programmations sur un scénario.

En haut, on retrouve quelques fonctions utiles pour gérer notre scénario :

* *statut* : état actuel de votre scénario
* *variables* : permet d'afficher les variables
* *Expression* : permet d'afficher le testeur d'expression
* *Executer* : permet de tester le scénario (N'oubliez pas de sauvegarder au préalable !)
* *Supprimer* : permet de supprimer le scénario
* *Sauvegarder* : permet de sauvegarder les changements effectués
* *Template* : permet d'accéder aux templates et d'en appliquer au scénario
* *Exporter* : permet d'obtenir une version texte du scénario
* *Log* : permet d'afficher les logs du scénario
* *Dupliquer* : permet de copier le scénario en indiquant un nouveau nom
* *Liens* : permet de visualiser le graphique des éléments en lien avec le scénario

==Scénario

C'est ici que vous allez construire votre scénario. Il faut commencer par ajouter un bloc :

image::../images/scenario4.JPG[]

* *Si/Alors/Sinon* : permet de réaliser des actions sous condition(s).
* *Action* : permet de lancer une action simple sans aucune condition
* *Boucle* : permet de réaliser des actions de manière répétitive de 1 jusqu’à un nombre défini (ou même une valeur d’un capteur, ou nombre aléatoire...).
* *Dans* : permet de lancer une action dans X minute(s) (0 est une valeur possible). La particularité c'est que les actions sont lancées en arrière-plan, elles ne bloquent donc pas la suite du scénario. C'est donc un bloc non bloquant
* *A* : permet de dire à Jeedom de lancer les actions du bloc à une heure donnée (sous la forme hhmm). Ce bloc est non bloquant. Attention il ne faut pas mettre les 0 initiaux. Ex 30 pour 00h30 ou  146 pour 1h46 et 1050 pour 10h50
* *Code* : permet d’écrire directement en code PHP (demande certaines connaissances et peut être risqué mais permet de ne plus avoir aucune contrainte).
* *Commentaire* : permet d'ajouter des commentaires à son scénario

[TIP]
Devant chaque bloc (en dessous de la double flèche verticale qui permet de déplacer les blocs) vous avez un petit case pour désactiver complètement le bloc sans pour autant supprimer celui-ci (permet de faire des tests pour le réactiver plus tard par exemple)

[NOTE]
Sur les blocs de type Si/Alors/Sinon vous avez devant des flèches circulaires, elles permettent d'activer ou non la répétition des actions si l'évaluation de la condition donne le même résultat que la précedente évaluation

Pour les conditions, Jeedom essaye de faire en sorte qu’on puisse les écrire le plus possible en langage naturel tout en restant souple. On a donc un bouton permettant de sélectionner un équipement puis on écrit la condition. Il existe une liste de tags permettant d’avoir accès à des variables issues du scénario ou d’un autre, à l’heure, à la date, à un nombre aléatoire,….

image::../images/scenario5.JPG[]

Le premier bouton permet d'aller chercher une commande : 

image::../images/scenario6.JPG[]

Une fois la commande trouvée, Jeedom vous demande ce que vous voulez tester : 

image::../images/scenario7.JPG[]

En fonction du type vous aurez différentes possibilités, vous pouvez ensuite mettre d'autres tests et les lier avec un "ou" ou un "et". Ainsi avec cet assistant vous pouvez construire votre condition.

[TIP]
Si vous cliquez sur "Ne rien mettre" Jeedom va juste écrire la commande dans le champ condition en vous laissant la main pour la suite.

Le deuxième bouton quant à lui permet d'aller chercher un scénario pour, par exemple, tester si celui-ci est en cours (voir partie "Condition ou valeur d’une commande d’action")

Pour les actions, on peut exécuter soit une action d’une commande (les options de celle-ci apparaitront sur sa droite), soit une commande d’affectation de variable ou de pause(très pratique pour simuler la présence surtout couplée à la génération d’une durée aléatoire) ou même d’action sur un autre scénario (start, stop, activer, désactiver).

Vous retrouvez ici les possibilités suivantes : 

image::../images/scenario8.JPG[]

Dans l'ordre : 

* un bouton pour déplacer l'action (les doubles flèches), il suffit de cliquer et maintenir le bouton puis de déplacer le bloc
* un bouton pour supprimer l'action
* un bouton pour désactiver temporairement l'action
* un bouton pour rechercher une commande d'action
* un bouton pour les actions spécifiques, avec à chaque fois la description de cette action

=== Déclencheurs

Il existe des déclencheurs spécifiques (autre que ceux fournis par les commandes) :

* *\#start#*  : déclenché au (re)démarrage de Jeedom,
* *\#begin_backup#*  : événement envoyé au début du backup.
* *\#end_backup#*  : événement envoyé à la fin du backup.
* *\#begin_update#*  : événement envoyé au début de la mise à jour.
* *\#end_update#*  : événement envoyé à la fin de la mise à jour.
* *\#begin_restore#*  : événement envoyé au début du restore.
* *\#end_restore#*  : événement envoyé à la fin du restore.

Vous pouvez aussi déclencher un scénario sur mise à jour d'une variable en mettant : #variable(nom_variable)# ou en utilisant l'api http décrite ici : https://github.com/jeedom/core/blob/beta/doc/fr_FR/api_http.asciidoc#pilotage-des-scénarios

[TIP]
Vous avez ici aussi un bouton pour aller chercher une commande

=== Condition ou valeur d'une commande d'action

Vous pouvez utiliser n'importe lequel des symboles suivant pour les opérateurs : 

* == : égal,
* > : supérieur,
* >= : supérieur ou égal,
* < : inférieur,
* \<= : inférieur ou égal,
* != : différent,
* matches : contient (ex : #[Salle de bain][Hydrometrie][etat]# matches "/humide/" ),
* not ( ... matches ...) : ne contient pas (ex : not(#[Salle de bain][Hydrometrie][etat]# matches "/humide/")),

Vous pouvez combiner n'importe quelle opération avec les opérateurs suivants :

* && / ET / et / AND / and : et,
* || / OU / ou / OR / or : ou,
* |^ / XOR / xor : ou.

Vous pouvez aussi utiliser les tags suivants :

[TIP]
Un tag est remplacé lors de l'exécution du scénario par sa valeur

[TIP]
Pour avoir les zéros intiaux à l'affichage, il faut utilier la fonction Date().
Voir http://php.net/manual/fr/function.date.php


* *\#seconde#* : seconde courante (sans les zéros initiaux, ex : 6 pour 08:07:06),
* *\#heure#* : heure courante au format 24h  (ex : 17 pour 17h15) (sans les zéros initiaux, ex : 8 pour 08:07:06),
* *\#heure12#* : heure courante au format 12h (ex : 5 pour 17h15) (sans les zéros initiaux, ex : 8 pour 08:07:06),
* *\#minute#* : minute courante (ex : 15 pour 17h15) (sans les zéros initiaux, ex : 7 pour 08:07:06),
* *\#jour#* : jour courant (sans les zéros initiaux, ex : 6 pour 06/07/2017),
* *\#mois#* : mois courant (sans les zéros initiaux, ex : 7 pour 06/07/2017),
* *\#annee#* : année courante,
* *\#time#* : heure et minute courante (ex : 1715 pour 17h15),
* *\#timestamp#* : retourne le nombre de secondes depuis le 1er janvier 1970,
* *\#date#* : jour et mois courant (ex : 1215 pour le 15 décembre),
* *\#semaine#* : numéro de la semaine (ex : 51),
* *\#sjour#* : pour le nom du jour de la semaine (ex : Samedi),
* *\#njour#* : numéro du jour de 0 (dimanche) à 6 (samedi),
* *\#smois#* : pour le nom du mois (ex : Janvier),
* *\#IP#* : IP interne de jeedom,
* *\#hostname#* : nom de la machine Jeedom,
* *\#trigger#* : nom de la commande qui a déclenché le scénario.

Vous avez aussi les tags suivants en plus si votre scénario a été déclenché par une interaction : 

* *\#query#* : interaction ayant déclenché le scénario,
* *\#profil#* : profil de l'utilisateur ayant déclenché le scénario (peut être vide).

[IMPORTANT]
Lorsqu'un scénario est déclenché par une interaction, celui-ci est forcément exécuté en mode rapide.
    
Plusieurs fonctions sont disponibles pour les équipements :

* **average**(commande,période) et **averageBetween**(commande,start,end) : donnent la moyenne de la commande sur la période (period=[month,day,hour,min] ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    ** Ex : average(\#[Salle de bain][Hydrometrie][Humidité]#,1 hour) : renvoie la moyenne de la commande sur la dernière heure
    ** Ex : averageBetween(\#[Salle de bain][Hydrometrie][Humidité]#,2015-01-01 00:00:00,2015-01-15 00:00:00) : renvoie la moyenne de la commande entre le 1 janvier 2015 et le 15 janvier 2015
* **min**(commande,période) et **minBetween**(commande,start,end) : donnent le minimum de la commande sur la période (period=[month,day,hour,min] ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    ** Ex : min(\#[Salle de bain][Hydrometrie][Humidité]#,15 min) : renvoie le minimum de la commande sur les 15 dernières minutes
    ** Ex : minBetween(\#[Salle de bain][Hydrometrie][Humidité]#,2015-01-01 00:00:00,2015-01-15 00:00:00) : renvoie le minimum de la commande entre le 1 janvier 2015 et le 15 janvier 2015
* **max**(commande,période) et **maxBetween**(commande,start,end) : donnent le maximum de la commande sur la période (period=[month,day,hour,min] ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    ** Ex : max(\#[Salle de bain][Hydrometrie][Humidité]#,7 day) : renvoie le maximum de la commande sur les 7 derniers jours
    ** Ex : maxBetween(\#[Salle de bain][Hydrometrie][Humidité]#,2015-01-01 00:00:00,2015-01-15 00:00:00) : renvoie le maximum de la commande entre le 1 janvier 2015 et le 15 janvier 2015
* **duration**(commande, valeur, période) et **durationbetween**(commande,valeur,start,end) : donnent la durée en minutes pendant laquelle l'équipement avait la valeur choisie sur la période (period=[month,day,hour,min] ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    ** Ex : duration(\#[Salon][Prise][Etat]#,1,Today) : renvoie la durée en minutes pendant laquelle la prise était allumée depuis le début de la journée.
    ** Ex : durationBetween(\#[Salon][Prise][Etat]#,0,Last Monday,Now) : renvoie la durée en minutes pendant laquelle la prise était éteinte depuis lundi dernier.
* **statistics**(commande,calcul,période) et **statisticsBetween**(commande,calcul,start,end) : donnent le résultat de différents calculs statistiques (sum, count, std, variance, avg, min, max) sur la période (period=[month,day,hour,min] ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    ** Ex : statistics(\#[Salle de bain][Hydrometrie][Humidité]#,std,1 mois) : renvoi http://fr.wikipedia.org/wiki/%C3%89cart_type[l'écart-type] de température sur un mois.
* **tendance**(commande,période,seuil) : donne la tendance de la commande sur la période (period=[month,day,hour,min] ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    * Ex : tendance(\#[Salle de bain][Hydrometrie][Humidité]#,1 hour,0.1) : renvoie 1 si en augmentation, 0 si constant et -1 si en diminution
           Le seuil permet de definir la sensibilité, attention le calcul du seuil utilise la calcul de http://fr.wikipedia.org/wiki/M%C3%A9thode_des_moindres_carr%C3%A9s[moindre carrés]
* **stateDuration**(commande,[valeur]) : donne la durée en secondes depuis le dernier changement de valeur. Retourne -1 si aucun historique n'existe ou si la valeur n'existe pas dans l'historique. Return -2 si la commande n'est pas historisée
    ** Ex : stateDuration(\#[Salle de bain][Hydrometrie][Humidité]#) : renvoie 300 si cette valeur est la depuis 5min
* **lastChangeStateDuration**(commande,valeur) : donne la durée en secondes depuis le dernier changement d'état à la valeur passée en paramètre.Attention, la valeur de l'équipement doit être historisée.
    ** Ex : lastChangeStateDuration(\#[Salle de bain][Hydrometrie][Humidité]#,0) : renvoie 300 si cette valeur est passée à 0 la dernière fois il y a 5 minutes (même si depuis sa valeur a changé).
* **lastStateDuration**(commande,valeur) : donne la durée en secondes pendant laquelle l'équipement a dernièrement eu la valeur choisie. Attention, la valeur de l'équipement doit être historisée.
    ** Ex : lastStateDuration(\#[Salle de bain][Hydrometrie][Humidité]#,0) : renvoie 300 si la valeur 0 est là depuis 5 minutes ou si elle a été là pendant 5 minutes précédemment.
* **stateChanges**(commande,[valeur], période) et **stateChangesBetween**(commande, [valeur], start, end) : donnent le nombre de changements d'état (vers une certaine valeur si indiquée, ou au total sinon) sur la période (period=[month,day,hour,min] ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP]) ou entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    ** Ex : stateChanges(\#[Salon][Prise][Etat]#,1,Today) : renvoie le nombre d'allumages (passage à 1) de la prise aujourd'hui
    ** Ex : stateChangesBetween(\#[Salon][Prise][Etat]#,0,2015-01-01 00:00:00,2015-01-15 00:00:00) : renvoie le nombre d'extinctions (passage à 0) de la prise entre le 1 janvier 2015 et le 15 janvier 2015
* **lastBetween**(commande,start,end) : donne la dernière valeur enregistrée pour l'équipement entre les 2 bornes demandées (sous la forme Y-m-d H:i:s ou http://php.net/manual/fr/datetime.formats.relative.php[expression PHP])
    ** Ex : lastBetween(\#[Salle de bain][Hydrometrie][Humidité]#,Yesterday,Today) : renvoie la dernière température enregistrée hier.
* **variable**(mavariable,valeur par défaut) : récupération de la valeur d'une variable ou de la valeur souhaitée par défaut
    ** Ex : variable(plop,10) renvoie la valeur de la variable plop ou 10 si elle est vide ou n'existe pas
* **scenario**(scenario) : donne le statut du scénario
    * Ex : scenario(\#[Salle de bain][Lumière][Auto]#) : renvoie 1 en cours, 0 si arreté et -1 si desactivé, -2 si le scénario n'existe pas et -3 si l'état n'est pas cohérent
* **lastScenarioExecution**(scenario) : donne la durée en secondes depuis le dernier lancement du scénario
    ** Ex : lastScenarioExecution(\#[Salle de bain][Lumière][Auto]#) : renvoie 300 si le scénario s'est lancé pour la dernière fois il y a 5 min
* **collectDate**(cmd,[format]) : renvoie la date de la dernière donnée pour la commande donnée en paramètre, le 2ème paramètre optionel permet de spécifier le format de retour (détails http://php.net/manual/fr/function.date.php[ici]). Un retour de -1 signifie que la commande est introuvable, et -2 que la commande n'est pas de type info
    ** Ex : collectDate(\#[Salle de bain][Hydrometrie][Humidité]#) : renverra 2015-01-01 17:45:12
* **valueDate**(cmd,[format]) : renvoie la date de la dernière donnée pour la commande donnée en paramètre, le 2ème paramètre optionel permet de spécifier le format de retour (détails http://php.net/manual/fr/function.date.php[ici]). Un retour de -1 signifie que la commande est introuvable, et -2 que la commande n'est pas de type info
    ** Ex : valueDate(\#[Salle de bain][Hydrometrie][Humidité]#) : renverra 2015-01-01 17:50:12
* **eqEnable**(equipement) : renvoie l'état de l'équipement (actif ou non)
    ** Ex : eqEnable(\#[Aucun][Basilique]#) : renvoie -2 si l'équipement est introuvable, 1 si l'équipement est actif et 0 s'il est inactif
* **tag**(montag,[defaut]) : permet de recuperer la valeur d'un tag ou la valeur par défaut si il n'existe pas
    ** Ex : tag(montag,toto) : renvoi la valeur de "montag" si il existe sinon renvoi la valeur "toto"
* **name**(type,commande) : permet de recuperer le nom de la commande, de l'équipement ou de l'objet. Type vaut soit cmd, eqLogic ou object
    ** Ex : name(eqLogic,#[Salle de bain][Hydrometrie][Humidité]#) : renvoi Hydrometrie   


Les périodes et intervalles de ces fonctions peuvent également s'utiliser avec http://php.net/manual/fr/datetime.formats.relative.php[des expressions PHP] comme par exemple :

* 'Now' : maintenant
* 'Today' : 00:00 aujourd'hui (permet par exemple d'obtenir des résultats de la journée si entre 'Today' et 'Now')
* 'Last Monday' : lundi dernier à 00:00
* '5 days ago' : il y a 5 jours
* 'Yesterday noon' : hier midi
* Etc.

Voici un exemple pratique pour comprendre les valeurs retournées par ces différentes fonctions :

[options="header",width="100%"]
|======================
| Prise ayant pour valeurs :        | 000 (pendant 10 minutes) 11 (pendant 1 heure) 000 (pendant 10 minutes)
| average(prise,période)            | Renvoie la moyenne des 0 et 1 (peut être influencée par le polling)
| min(prise,période)                | Renvoie 0 : la prise a bien été éteinte dans la période
| max(prise,période)                | Renvoie 1 : la prise a bien été allumée dans la période
| duration(prise,1,période)         | Renvoie 60 : la prise était allumée (à 1) pendant 60 minutes dans la période
| duration(prise,0,période)         | Renvoie 20 : la prise était éteinte (à 0) pendant 20 minutes dans la période
| statistics(prise,count,période)   | Renvoie 8 : il y a eu 8 remontées d'état dans la période
| tendance(prise,période,0.1)       | Renvoie -1 : tendance à la baisse
| stateDuration(prise)              | Renvoie 600 : la prise est dans son état actuel depuis 600 secondes (10 minutes)
| stateDuration(prise,0)            | Renvoie 600 : la prise est éteinte (à 0) depuis 600 secondes (10 minutes)
| stateDuration(prise,1)            | Renvoie une valeur comprise entre 0 et stateDuration(prise) (selon votre polling) : la prise n'est pas dans cet état
| lastChangeStateDuration(prise,0)  | Renvoie 600 : la prise s'est éteinte (passage à 0) pour la dernière fois il y a 600 secondes (10 minutes)
| lastChangeStateDuration(prise,1)  | Renvoie 4200 : la prise s'est allumée (passage à 1) pour la dernière fois il y a 4200 secondes (1h10)
| lastStateDuration(prise,0)        | Renvoie 600 : la prise est éteinte depuis 600 secondes (10 minutes)
| lastStateDuration(prise,1)        | Renvoie 3600 : la prise a été allumée pour la dernière fois pendant 3600 secondes (1h)
| stateChanges(prise,période)       | Renvoie 3 : la prise a changé 3 fois d'état pendant la période
| stateChanges(prise,0,période)     | Renvoie 2 : la prise s'est éteinte (passage à 0) deux fois pendant la période
| stateChanges(prise,1,période)     | Renvoie 1 : la prise s'est allumée (passage à 1) une fois pendant la période
|======================
Une boîte à outils de fonctions génériques peut également servir à effectuer des conversions ou calculs :

* **rand**(1,10) : pour un nombre aléatoire de 1 à 10
* **randText**(texte1;texte2;texte.....) : Permet de retourner un des textes aléatoirement (séparer les texte par un ";"), il n'y as pas de limite dans le nombre de texte
    ** Ex : randText(il fais \#[salon][oeil][température]#;La température est de \#[salon][oeil][température]#;Actuellement on a \#[salon][oeil][température]#)
    ** la fonction retournera un de ses textes aléatoirement à chaque execution
* **randomColor**(min,max) : donne une couleur aléatoire compris entre 2 bornes ( 0 => rouge, 50 => vert, 100 => bleu)
    ** Ex : randomColor(40,60) : pour avoir une couleur aléatoire proche du vert
* **trigger**(commande) : permet de connaître le déclencheur du scénario ou de savoir si c'est bien la commande passée en paramètre qui a déclenché le scénario
    ** Ex : trigger(\#[Salle de bain][Hydrometrie][Humidité]#) : 1 si c'est bien \#[Salle de bain][Hydrometrie][Humidité]# qui a déclenché le scénario sinon 0
* **triggerValue**(commande) : permet de connaitre la valeur du déclencheur du scénario
    ** Ex : triggerValue(\#[Salle de bain][Hydrometrie][Humidité]#) : 80 si l'hydrométrie de \#[Salle de bain][Hydrometrie][Humidité]# est de 80 %
* **round**(valeur,[decimal]) : permet un arrondi au dessus, [decimal] nombre de décimales après la virgule
    ** Ex : round(\#[Salle de bain][Hydrometrie][Humidité]# / 10) : renverra 9 si le pourcentage d'humidité et 85
* **odd**(valeur) : permet de savoir si un nombre est impair ou non. Renvoi 1 si impair 0 sinon
    ** Ex : odd(1) :  renverra 1
* **median**(commande1,commande2....commandeN) : renvoie la médiane de valeur
    ** Ex : median(15,25,20) :  renverra 20
* **time_op**(time,value) : permet de faire des opérations sur le temps, avec time=temps (ex 1530) et value=valeur à ajouter ou à soustraire en minutes
    ** Ex : time_op(\#time#, -90) : s'il est 16h50 renverra : 1650 - 0130 = 1520
* **formatTime**(time) : permet de formater le retour d'une chaine \#time#
    ** Ex : formatTime(1650) : renverra 16h50
* **floor**(time/60) : permet de convertir des secondes en minutes, ou des minutes en heures (floor(time/3600) pour des secondes en heures)
    ** Ex : floor(130/60) : renverra 2 (minutes si 130s, ou heures si 130m)
            
=== Action
En plus des commandes domotiques vous avez accès aux actions suivantes : 

* *sleep* : pause de x seconde(s)
* *wait* : attend jusqu'à ce que la condition soit valide (maximum 2h), le timeout est en seconde(s)                   
* *variable* : création/modification d'une variable ou de la valeur d'une variable
* *scenario* : permet le contrôle des scénarios, la partie tags permets d'envoyer des tags au scénario, ex montag=2 (attention il ne faut utiliser que des lettre de a à z, pas de majuscule pas d'accent et pas de caractères spéciaux). On récupere le tag dans le scénario cible avec la fonction tag(montag)
* *stop* : arrête le scénario
* *icon* : permet de changer l'icône de représentation du scénario
* *gotodesign* : change le design affiché sur tous les navigateurs par le design demandé
* *log* : permet de rajouter un message dans les logs
* *message* : permet d'ajouter un message dans le centre de message
* *equipement* : permet de modifier les propriétés d'un équipement visible/invisible actif/inactif
* *jeedom_poweroff* : demande à Jeedom de s'éteindre
* *scenario_return* : Retourne un texte ou une valeur pour une intéraction par exemple
* *event* : Permet de modifier la valeur d'une commande
* *alert* : permet d'afficher un petit message d'alerte sur tous les navigateurs qui ont une page jeedom ouverte. Vous pouvez en plus choisir 4 niveaux d'alerte
* *report* : permet d'exporter une vue au format (PDF,PNG, JPEG ou SVG) et de l'envoyer par le biais d'une commande de type message. Attention si votre accès internet est en https non signé cette fonctionalité ne marchera pas, il faut du http ou https signé.
* *remove_inat* : Permet de supprimer la programmation de tous les blocs DANS et A du scénario
* *popup* : permet d'afficher un popup qui doit absolument être validé sur tous les navigateurs qui ont une page jeedom ouverte.
* *ask* : permet d'indiquer à jeedom qu'il faut poser une question à l'utilisateur. La réponse est stockée dans une variable, il suffit ensuite de tester sa valeur. Pour le moment seuls les plugins sms et slack sont compatibles. Attention l'action ask est bloquante, tant qu'il n'y a pas de réponse ou que le timeout n'est pas atteint le scénario attend. Voila un exemple d'utilisation : 

image::../images/scenario20.JPG[]
             
=== Code

[IMPORTANT]
Attention les tags ne sont pas disponibles dans un bloc de type code.

Commandes (capteurs et actionneurs)::

* *cmd::byString($string)*;
    ** Retourne l'objet commande correspondant
    ** $string => lien vers la commande voulue : \#[objet][equipement][commande]# (ex :  \#[Appartement][Alarme][Actif]#)
* *cmd::byId($id)*;
    ** Retourne l'objet commande correspondant
    ** $id => Id de la commande voulue (voir Général => Affichage)
* *$cmd->execCmd($options = null)*;
    ** Exécute la commande et retourne le résultat
    ** $options => Options pour l'exécution de la commande (peut être spécifique au plugin), option de base : 
          *** Sous-type de la commande : 
          **** message => `$option = array('title' => 'titre du message , 'message' => 'Mon message');`
          **** color => `$option = array('color' => 'couleur en hexadécimal');`
          **** slider => `$option = array('slider' => 'valeur voulue de 0 à 100');`

Log::

* *log::add('filename','level','message')*;
    ** filename => nom du fichier de log
    ** level => [debug],[info],[error],[event]
    ** message => message à écrire dans les logs
                           
Scénario::

* *$scenario\->getName()*;
    ** Retourne le nom du scénario courant
                              
* *$scenario\->getGroup()*;
    ** Retourne le groupe du scénario
                           
* *$scenario\->getIsActive()*;
    ** Retourne l'état du scénario
                              
* *$scenario\->setIsActive($active)*;
    ** Permet d'activer ou non le scénario
    ** $active => 1 actif , 0 non actif
                              
* *$scenario\->setOnGoing($onGoing)*;
    ** Permet de dire si le scénario est en cours ou non
    ** $onGoing => 1 en cours , 0 arrêté
                               
* *$scenario\->save()*;
    ** Sauvegarde les modifications
                             
* *$scenario\->setData($key, $value)*;
    ** Sauvegarde une donnée (variable)
    ** $key => clef de la valeur (int ou string)
    ** $value => valeur à stocker (int, string, array ou object)
                               
* *$scenario\->getData($key)*;
    ** Récupère une donnée (variable)
    ** $key => clef de la valeur (int ou string)
                             
* *$scenario\->removeData($key)*;
    ** Supprime une donnée

* *$scenario\->setLog($message)*;
    ** Ecris message dans le log du scénario

* *$scenario\->persistLog()*;
    ** Force l'écriture du log (sinon il est écrit seulement à la fin du scénario). Attention ceci peut un peu ralentir le scénario

== Les variables

Vous pouvez en cliquant sur le bouton variable voir toutes les variables existantes sur votre système, changer leur valeur, les supprimer, en ajouter et voir dans quel scénario elles sont utilisées : 

image::../images/scenario14.JPG[]

== Template de scénario

Fonctionalité permettant de transformer un scénario en template pour par exemple l'appliquer sur un autre Jeedom ou le partager sur le Market. C'est aussi à partir de là que vous pouvez récupérer un scénario du Market

image::../images/scenario15.JPG[]

Vous verrez alors cette fenêtre : 

image::../images/scenario16.JPG[]

A partir de celle-ci que vous avez la possibilité : 

* D'envoyer un template à Jeedom (fichier JSON préalablement récupéré)
* De consulter la liste des scénarios disponibles sur le Market
* De créer un template à partir du scénario courant (n'oubliez pas de donner un nom)
* Consulter les templates actuellement présent sur votre Jeedom

Par un clic sur un template vous obtenez : 

image::../images/scenario17.JPG[]

En haut vous pouvez : 

* *Partager* : partager le template sur le Market
* *Supprimer* : supprimer le template 
* *Télécharger* : permet de récupérer le template sous forme de fichier JSON pour le renvoyer sur un autre Jeedom par exemple

En-dessous vous avez la partie pour appliquer votre template au scénario courant.

[TIP]
Etant donné que d'un Jeedom à l'autre ou d'une installation à une autre les commandes peuvent être différentes, Jeedom vous demande la correspondance des commandes entre celles présentes lors de la création du template et celles présentes chez vous.

Il vous suffit de remplir la correspondance des commandes puis de faire appliquer

== Les logs

Vous pouvez accéder aux logs d'éxecution d'un scénario en cliquant sur le bouton log de celui-ci : 

image::../images/scenario17.JPG[]

Vous obtenez : 

image::../images/scenario19.JPG[]

En haut vous pouvez rafraîchir le log, le télécharger ou le supprimer. La taille des logs n'est pas limitée en exécution mais en nombre de lignes (en fonction de la valeur mise dans la configuration de Jeedom)
